class Solution
{
    void dfs(char[][] grid, int x, int y)
    {
        //checking whether the cell is within the matrix bounds.
        if(x<0||y<0||x>=grid.length||grid[x].length<=y)
        {
            return ;
        }
        
        //if grid value is X, we update the grid value as 0 and
        //call the function recursively for adjacent nodes.
    	if(grid[x][y]=='X')
    	{
    		grid[x][y]='O';
    		dfs(grid,x+1,y);dfs(grid,x,y+1);dfs(grid,x-1,y);dfs(grid,x,y-1);
    	}
    }
    
    //Function to find the number of 'X' total shapes.
    public int xShape(char[][] grid)
    {
        int n=grid.length;
        int m=grid[0].length;
        int i,j,ans=0;
        
        //traversing all the cells of the matrix.
        for(i=0;i<grid.length;i++)
        {
            for(j=0;j<grid[i].length;j++)
            {
                //if grid value is X, we increment the counter and
                //call the dfs function.
                if(grid[i][j]=='X'){
				ans++;
				dfs(grid, i,j);
			    }
		    }
	    }
	    //returning the count.
	    return ans;
    }
}
